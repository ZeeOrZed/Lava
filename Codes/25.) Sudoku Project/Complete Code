import java.util.Scanner;

public class Sudoku
{
    public static void main(String[] args)
    {
        Scanner input = new Scanner(System.in);
        char play_again = 'y';
        int row, column;
        char difficulty;
        char value;

        do {

            System.out.println("What difficulty level do you want to play with?");
            System.out.print("Press 'e' for easy, 'm' for medium, 'h' for hard, or 'x' for expert: ");
            difficulty = input.next().charAt(0);
            difficulty = Character.toLowerCase(difficulty);

            char[][] board = board_generator(difficulty);
            boolean[][] hard_coded_values = new boolean[9][9];
            int total_values = 0;

            for (int i = 0; i <= 8; i++)
            {
                for (int j = 0; j <= 8; j++)
                {
                    hard_coded_values[i][j] = false;
                    if (board[i][j] != ' ')
                    {
                        hard_coded_values[i][j] = true;
                        total_values++;
                    }
                    else
                        hard_coded_values[i][j] = false;
                }
            }

            while (total_values<81)
            {
                print_board(board);
                System.out.println();

                char change_value;
                boolean incorrect;
                do
                {
                    row = row_pos();
                    column = column_pos();
                    System.out.println();
                    incorrect = invalid_row_column(row, column, hard_coded_values);
                } while (incorrect == true);

                System.out.println();

                do
                {
                    value = proper_value();
                    if (row_checker(row, value, board) == false && column_checker(column, value, board) == false && _3by3_checker(row, column, value, board) == false)
                    {
                        board[row][column] = value;
                        total_values++;
                        break;
                    }
                    else
                    {
                        System.out.println("Your value does not pass all three checks. Would you like to choose another value, or choose another position to add/change a value?");
                        System.out.print("Enter 'y' to try another value, or 'n' to try another index position: ");
                        change_value = input.next().charAt(0);
                        change_value = Character.toLowerCase(change_value);
                    }
                } while (change_value == 'y');
            }

            System.out.println("Congratulations! You won!");
            System.out.println("Would you like to play again?");
            System.out.println("Press 'y' if you'd like to play again, else press 'n'.");
            play_again = input.next().charAt(0);
            play_again = Character.toLowerCase(play_again);
        } while (play_again == 'y');
    }


    public static char[][] board_generator(char diff)
    {

        if (diff == 'e')
        {
            char[][] board = {
                    {' ',' ',' ',' ',' ','2',' ','9',' '},
                    {'1',' ',' ',' ',' ',' ',' ', '5',' '},
                    {' ','6','9','8','1',' ','7',' ','3'},
                    {' ','2','1',' ','3','7',' ',' ',' '},
                    {' ',' ',' ',' ','9',' ','2','4','1'},
                    {' ','5','4','6','2',' ','3',' ',' '},
                    {'6','1',' ','2','8',' ',' ',' ',' '},
                    {' ','8','5','1','4',' ',' ',' ','9'},
                    {' ','9',' ',' ',' ',' ','8','1','2'}};
            return board;
        }
        else if(diff == 'm')
        {
            char[][] board = {
                    {' ',' ',' ','3','9','8',' ',' ',' '},
                    {' ','2','7',' ',' ',' ',' ',' ',' '},
                    {' ','3',' ','4',' ',' ','1',' ',' '},
                    {' ',' ',' ',' ',' ',' ',' ','5','2'},
                    {'3',' ',' ',' ',' ','7',' ',' ','1'},
                    {' ',' ',' ','5','3','9',' ',' ',' '},
                    {'2',' ',' ','1',' ','5','9',' ',' '},
                    {' ',' ',' ',' ',' ',' ','8',' ','7'},
                    {'8','6',' ',' ',' ',' ',' ',' ',' '}};
            return board;
        }
        else if (diff == 'h')
        {
            char[][] board = {
                    {' ',' ',' ',' ','5',' ','6',' ',' '},
                    {'6',' ','7',' ',' ',' ','2','1',' '},
                    {' ',' ','3','9',' ',' ',' ',' ',' '},
                    {' ',' ',' ',' ','7',' ',' ',' ','8'},
                    {' ','5',' ',' ','3','4',' ','2',' '},
                    {' ',' ','2',' ',' ',' ',' ',' ','9'},
                    {' ','6',' ',' ',' ',' ','8',' ',' '},
                    {'8',' ',' ','3',' ','5',' ',' ','1'},
                    {' ','7',' ','1',' ',' ',' ',' ',' '}};
            return board;
        }
        else
        {
            char[][] board = {
                    {' ','1',' ','7','6',' ',' ',' ',' '},
                    {' ',' ',' ','5',' ',' ',' ','2','8'},
                    {' ',' ',' ',' ',' ','9','6',' ',' '},
                    {' ',' ',' ',' ',' ',' ',' ',' ',' '},
                    {' ',' ',' ','1',' ','5','4','9',' '},
                    {' ','3','2',' ',' ',' ','5','1',' '},
                    {' ','8',' ',' ',' ',' ',' ','4',' '},
                    {'9',' ','3',' ',' ','8',' ',' ','1'},
                    {' ',' ','5',' ',' ',' ','7',' ','6'}};
            return board;
        }
    }

    public static void print_board (char[][] board)
    {
        System.out.println("     1  2  3  4  5  6  7  8  9  ");
        System.out.println("------------------------------------------------------------------------");
        for (int i = 0; i <= 8; i++)
        {
            System.out.print(i + 1 + "   ");
            for (int j = 0; j <= 8; j++)
            {
                System.out.print(" " + board[i][j] + " ");
            }
            System.out.println();
        }
    }



    public static int row_pos ()
    {
        Scanner input = new Scanner(System.in);
        boolean correct = false;
        while(correct == false)
        {
            System.out.println("What row do you want to enter/change your value in?");
            System.out.print("Row: ");
            System.out.println();
            int row = input.nextInt() - 1;
            if (row < 0 || row > 8)
            {
                System.out.println("Invalid row number: out of bounds!");
                System.out.println("Please enter your row number again.");
                System.out.println();
            }
            else
                return row;
        }
        return 000;
    }
    public static int column_pos ()
    {
        Scanner input = new Scanner(System.in);
        boolean correct = false;
        while(correct == false)
        {
            System.out.println("What column do you want to enter/change your value in?");
            System.out.print("Column: ");
            System.out.println();
            int column = input.nextInt() - 1;
            if (column < 0 || column > 8)
            {
                System.out.println("Invalid Column number: out of bounds!");
                System.out.println("Please enter your Column number again.");
                System.out.println();
            }
            else
                return column;
        }
        return 000;
    }
    public static boolean invalid_row_column (int row, int column, boolean[][] values)
    {
        if (values[row][column] == true)
        {
            System.out.println("Invalid row and/or column number: You can not change the initial values of the board!");
            System.out.println("Please enter your rwo and column number again.");
            System.out.println();
            return true;
        }
        return false;
    }



    public static char proper_value ()
    {
        Scanner input = new Scanner(System.in);
        boolean valid = false;
        while (valid == false)
        {
            System.out.print("Enter the value you want to enter/replace: ");
            int value = input.nextInt();
            if (value < 1 || value > 9)
            {
                System.out.println("Invalid value: out of expected range!");
                System.out.println("Please enter your value again.");
                System.out.println();
            }
            else
                return (char)(value+48);
        }
        return ' ';
    }

    public static boolean row_checker(int row, char value, char[][] board)
    {
        for (int count = 0; count <= 8; count++)
        {
            if (board[row][count] == (char)(value))
            {
                return true;
            }
        }
        return false;
    }

    public static boolean column_checker(int column, char value, char[][] board)
    {
        for (int count = 0; count <= 8; count++)
        {
            if (board[count][column] == (char)(value))
            {
                return true;
            }
        }
        return false;
    }

    public static boolean _3by3_checker(int row, int column, char value, char[][] board)
    {
        int row_count = -1, column_count = -1;
        int count = 0;

        while (row_count == -1 || column_count == -1)
        {
            if (row >= count && row <= count + 2)
                row_count = count;
            if (column >= count && column <= count + 2)
                column_count = count;
            count += 3;
        }

        for (int i = row_count; i <= row_count+2; i++)
        {
            for (int j = column_count; j <= column_count+2; j++)
            {
                if (board[i][j] == value)
                {
                    return true;
                }
            }
        }
        return false;
    }
}
