import java.util.Scanner;

public class Sudoku
{
    public static void main(String[] args)
    {
        Scanner input = new Scanner(System.in);
        char play_again = 'y'; // Used to either end the program, or continue running.
        int row, column;
        char difficulty; // What difficulty the user wants to play with.
        char value; // The value that will be entered into the board.

        do
        {
            System.out.println("What difficulty level do you want to play with?");
            System.out.print("Press 'e' for easy, 'm' for medium, 'h' for hard, or 'x' for expert: ");
            difficulty = input.next().charAt(0);
            difficulty = Character.toLowerCase(difficulty);

            char[][] board = board_generator(difficulty); // generates board based on chosen difficulty.

            // To prevent user from changing the hard-coded values, a separate 2D Boolean array has been created
            // that keeps track of the hard-coded values.
            boolean[][] hard_coded_values = new boolean[9][9];
            int total_values = 0; // Used to end the current game once the board has been filled.

            for (int i = 0; i <= 8; i++)
                for (int j = 0; j <= 8; j++)
                {
                    hard_coded_values[i][j] = false;
                    if (board[i][j] != ' ')
                    {
                        hard_coded_values[i][j] = true; // if the board has a value at the index, it's boolean will be true in this 2d array.
                        total_values++; // total values increases by 1.
                    }
                    else
                        hard_coded_values[i][j] = false;
                }


            while (total_values<81) // while the board isn't complete. Do-while would also work here.
            {
                print_board(board); // Prints board, including whenever user enters or updates a value.
                System.out.println();

                char change_value; // In case the user enters a value that doesn't pass the three Sudoku laws, the user will be given the choice if they want to try a new value, or try to enter a value in a different index.
                boolean incorrect; // Used to confirm the user is entering a value in a legal index position.
                do
                {
                    row = row_pos(); // gets row position from user.
                    column = column_pos(); // gets column position from user.
                    System.out.println();
                    incorrect = invalid_row_column(row, column, hard_coded_values);
                } while (incorrect == true);

                System.out.println();

                do
                {
                    value = proper_value(); // Gets a value to enter into the board from the user.
                    if (row_checker(row, value, board) == false && column_checker(column, value, board) == false && _3by3_checker(row, column, value, board) == false)
                    { // if the value passes the three Sudoku laws.
                        if (board[row][column] == ' ') // if the user is entering a value into an empty space.
                            total_values++; // total values will only be incremented if the user is adding a new value, not if he's updating one.
                        board[row][column] = value; // the board will be updated with the value the user entered.
                        break;
                    }
                    else
                    { // The value the user entered is illegal.
                        System.out.println("Your value does not pass all three checks. Would you like to choose another value, or choose another position to add/change a value?");
                        System.out.print("Enter 'y' to try another value, or 'n' to try another index position: ");
                        change_value = input.next().charAt(0);
                        change_value = Character.toLowerCase(change_value);
                    }
                } while (change_value == 'y');
            }

            System.out.println(); // Game is complete. Now the user can choose if he wants to play a new game, or not.
            System.out.println("Congratulations! You won!");
            System.out.println("Would you like to play again?");
            System.out.println("Press 'y' if you'd like to play again, else press 'n'.");
            play_again = input.next().charAt(0);
            play_again = Character.toLowerCase(play_again);
            System.out.println();
        } while (play_again == 'y');
    }


    public static char[][] board_generator(char diff)
    { // Generates four different boards based on four different difficulty levels.
        if (diff == 'e')
        {
            char[][] board = {
                    {' ',' ',' ',' ',' ','2',' ','9',' '},
                    {'1',' ',' ',' ',' ',' ',' ', '5',' '},
                    {' ','6','9','8','1',' ','7',' ','3'},
                    {' ','2','1',' ','3','7',' ',' ',' '},
                    {' ',' ',' ',' ','9',' ','2','4','1'},
                    {' ','5','4','6','2',' ','3',' ',' '},
                    {'6','1',' ','2','8',' ',' ',' ',' '},
                    {' ','8','5','1','4',' ',' ',' ','9'},
                    {' ','9',' ',' ',' ',' ','8','1','2'}};
            return board;
        }
        else if(diff == 'm')
        {
            char[][] board = {
                    {' ',' ',' ','3','9','8',' ',' ',' '},
                    {' ','2','7',' ',' ',' ',' ',' ',' '},
                    {' ','3',' ','4',' ',' ','1',' ',' '},
                    {' ',' ',' ',' ',' ',' ',' ','5','2'},
                    {'3',' ',' ',' ',' ','7',' ',' ','1'},
                    {' ',' ',' ','5','3','9',' ',' ',' '},
                    {'2',' ',' ','1',' ','5','9',' ',' '},
                    {' ',' ',' ',' ',' ',' ','8',' ','7'},
                    {'8','6',' ',' ',' ',' ',' ',' ',' '}};
            return board;
        }
        else if (diff == 'h')
        {
            char[][] board = {
                    {' ',' ',' ',' ','5',' ','6',' ',' '},
                    {'6',' ','7',' ',' ',' ','2','1',' '},
                    {' ',' ','3','9',' ',' ',' ',' ',' '},
                    {' ',' ',' ',' ','7',' ',' ',' ','8'},
                    {' ','5',' ',' ','3','4',' ','2',' '},
                    {' ',' ','2',' ',' ',' ',' ',' ','9'},
                    {' ','6',' ',' ',' ',' ','8',' ',' '},
                    {'8',' ',' ','3',' ','5',' ',' ','1'},
                    {' ','7',' ','1',' ',' ',' ',' ',' '}};
            return board;
        }
        else
        {
            char[][] board = {
                    {' ','1',' ','7','6',' ',' ',' ',' '},
                    {' ',' ',' ','5',' ',' ',' ','2','8'},
                    {' ',' ',' ',' ',' ','9','6',' ',' '},
                    {' ',' ',' ',' ',' ',' ',' ',' ',' '},
                    {' ',' ',' ','1',' ','5','4','9',' '},
                    {' ','3','2',' ',' ',' ','5','1',' '},
                    {' ','8',' ',' ',' ',' ',' ','4',' '},
                    {'9',' ','3',' ',' ','8',' ',' ','1'},
                    {' ',' ','5',' ',' ',' ','7',' ','6'}};
            return board;
        }
    }

    public static void print_board (char[][] board)
    { // Prints the board, including everytime the user updates the board.
        System.out.println("    1  2  3   4  5  6   7  8  9  ");
        for (int i = 0; i <= 8; i++)
        {
            if (i == 0 || i == 3 || i == 6)
                System.out.println("  _______________________________");
            System.out.print(i + 1 + " |");
            for (int j = 0; j <= 8; j++)
            {
                if (j == 2 || j == 5 | j == 8)
                    System.out.print(" " + board[i][j] + " |");
                else
                    System.out.print(" " + board[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println("  _______________________________");
    }



    public static int row_pos ()
    { // Gets the row index from the user. Checks if it's a valid row.
        Scanner input = new Scanner(System.in);
        boolean correct = false;
        while(correct == false)
        {
            System.out.println("What row do you want to enter/change your value in?");
            System.out.print("Row: ");
            System.out.println();
            int row = input.nextInt() - 1;
            if (row < 0 || row > 8)
            {
                System.out.println("Invalid row number: out of bounds!");
                System.out.println("Please enter your row number again.");
                System.out.println();
            }
            else
                return row;
        }
        return 000;
    }
    public static int column_pos ()
    { // Gets column index from the user. Checks if it's a valid column.
        Scanner input = new Scanner(System.in);
        boolean correct = false;
        while(correct == false)
        {
            System.out.println("What column do you want to enter/change your value in?");
            System.out.print("Column: ");
            System.out.println();
            int column = input.nextInt() - 1;
            if (column < 0 || column > 8)
            {
                System.out.println("Invalid Column number: out of bounds!");
                System.out.println("Please enter your Column number again.");
                System.out.println();
            }
            else
                return column;
        }
        return 000;
    }
    public static boolean invalid_row_column (int row, int column, boolean[][] values)
    { // Checks if the chosen row and column number doesn't have a hard-coded value. If it does, user is prompted to enter a new row and column.
        if (values[row][column] == true)
        {
            System.out.println("Invalid row and/or column number: You can not change the initial values of the board!");
            System.out.println("Please enter your row and column number again.");
            System.out.println();
            return true;
        }
        return false;
    }



    public static char proper_value ()
    { // Gets the value the user wants to enter into his chosen row and column.
        Scanner input = new Scanner(System.in);
        boolean valid = false;
        while (valid == false)
        {
            System.out.print("Enter the value you want to enter/replace current value with: ");
            int value = input.nextInt();
            if (value < 1 || value > 9)
            {
                System.out.println("Invalid value: out of expected range!");
                System.out.println("Please enter your value again.");
                System.out.println();
            }
            else
                return (char)(value+48);
        }
        return ' ';
    }

    public static boolean row_checker(int row, char value, char[][] board)
    { // Checks if the user entered value passes the row law of Sudoku.
        for (int count = 0; count <= 8; count++)
            if (board[row][count] == (char)(value))
                return true;

        return false;
    }

    public static boolean column_checker(int column, char value, char[][] board)
    { // Checks if the user entered value passes the column law of Sudoku.
        for (int count = 0; count <= 8; count++)
            if (board[count][column] == (char)(value))
                return true;

        return false;
    }

    public static boolean _3by3_checker(int row, int column, char value, char[][] board)
    { // Checks if the user entered value passes the 3x3 law of Sudoku.
        int row_count = -1, column_count = -1;
        int count = 0;

        while (row_count == -1 || column_count == -1)
        {
            if (row >= count && row <= count + 2)
                row_count = count;
            if (column >= count && column <= count + 2)
                column_count = count;
            count += 3;
        }

        for (int i = row_count; i <= row_count+2; i++)
            for (int j = column_count; j <= column_count+2; j++)
                if (board[i][j] == value)
                    return true;

        return false;
    }
}
